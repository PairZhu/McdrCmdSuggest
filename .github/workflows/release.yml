name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  # 构建作业：构建所有版本并上传构建产物
  build:
    runs-on: ubuntu-latest
    outputs:
      mc_versions: ${{ steps.get_mc_versions.outputs.result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate gradle wrapper
        uses: gradle/actions/wrapper-validation@v4

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Cache gradle files
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ./.gradle/loom-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/gradle.properties', '**/*.accesswidener', 'settings.json') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set build environment variables
        run: echo "BUILD_RELEASE=true" >> $GITHUB_ENV

      - name: Make gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Build all versions
        run: ./gradlew buildAndGather

      - name: Get Minecraft versions
        id: get_mc_versions
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const versionsDir = path.join(process.cwd(), 'versions');
            const versions = fs.readdirSync(versionsDir).filter(dir => fs.statSync(path.join(versionsDir, dir)).isDirectory() && /^\d+\.\d+(\.\d+)?$/.test(dir));
            return versions;

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/libs/*.jar
          retention-days: 1

      - name: Build Changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          mode: HYBRID

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: build/libs/*.jar
          body: ${{ steps.build_changelog.outputs.changelog }}

  # 为每个Minecraft版本独立发布
  publish:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mc_version: ${{ fromJson(needs.build.outputs.mc_versions) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/libs

      - name: Filter artifacts for current MC version
        run: |
          mkdir -p build/libs/filtered
          # 移动当前Minecraft版本的jar文件到filtered目录
          find build/libs -name "*-mc${{ matrix.mc_version }}*.jar" -not -name "*-dev.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" -not -name "*-all.jar" -not -name "*-shadow.jar" -exec cp {} build/libs/filtered/ \;
          echo "Found artifacts for MC ${{ matrix.mc_version }}:"
          ls -la build/libs/filtered/

      - name: Read common properties
        id: properties_common
        uses: BrycensRanch/read-properties-action@v1
        with:
          file: gradle.properties
          all: true

      - name: Read version-specific properties
        id: properties_version
        uses: BrycensRanch/read-properties-action@v1
        with:
          file: versions/${{ matrix.mc_version }}/gradle.properties
          all: true

      - name: Publish to Modrinth
        uses: Kir-Antipov/mc-publish@v3.3
        with:
          modrinth-id: ${{ secrets.MODRINTH_PROJECT_ID }}
          modrinth-token: ${{ secrets.MODRINTH_API_TOKEN }}

          files: build/libs/filtered/*.jar
          name: ${{ steps.properties_common.outputs.mod_name }} v${{ steps.properties_common.outputs.mod_version }} (MC ${{ steps.properties_version.outputs.minecraft_version }})
          version: v${{ steps.properties_common.outputs.mod_version }}-mc${{ steps.properties_version.outputs.minecraft_version }} 
          changelog: ${{ needs.build.steps.build_changelog.outputs.changelog }}
          version-type: release
          loaders: fabric
          game-versions: ${{ steps.properties_version.outputs.game_versions }}
          dependencies: fabric-api(required)
